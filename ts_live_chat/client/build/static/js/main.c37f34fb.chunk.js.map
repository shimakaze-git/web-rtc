{"version":3,"sources":["logo.svg","SocketService.ts","ChatContext.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","SocketService","Object","classCallCheck","this","socket","createClass","key","value","console","log","io","message","emit","fromEvent","disconnect","ChatContext","createContext","App","state","messages","author","input","_this2","context","init","onMessage","subscribe","m","push","setState","_this3","msgIndex","react_default","a","createElement","className","src","logo","alt","map","msg","placeholder","onChange","e","target","onClick","send","React","Component","contextType","Boolean","window","location","hostname","match","chat","ReactDOM","render","Provider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uSCI3BC,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KACUC,OAAgC,GAD1C,OAAAH,OAAAI,EAAA,EAAAJ,CAAAD,EAAA,EAAAM,IAAA,OAAAC,MAAA,WAMI,OAFAC,QAAQC,IAAI,6BACZN,KAAKC,OAASM,IAAG,kBACVP,OANX,CAAAG,IAAA,OAAAC,MAAA,SAUeI,GACXH,QAAQC,IAAI,qBAAuBE,GACnCR,KAAKC,OAAOQ,KAAK,UAAWD,KAZhC,CAAAL,IAAA,YAAAC,MAAA,WAiBI,OAAOM,YAAUV,KAAKC,OAAQ,aAjBlC,CAAAE,IAAA,aAAAC,MAAA,WAsBIJ,KAAKC,OAAOU,iBAtBhBd,EAAA,GCDae,EAA4CC,wBAAc,IAAIhB,GCGrEiB,8MAGJC,MAAmB,CACjBC,SAAU,CACR,CACER,QAAS,uEACTS,OAAQ,QAGZC,MAAO,sEAGY,IAAAC,EAAAnB,KAGnBA,KAAKoB,QAAQC,OAEMrB,KAAKoB,QAAQE,YAErBC,UAAU,SAACC,GACpB,IAAIR,EAAWG,EAAKJ,MAAMC,SAE1BA,EAASS,KAAKD,GACdL,EAAKO,SAAS,CAAEV,SAAUA,qDAK5BhB,KAAKoB,QAAQT,8CAGL,IAAAgB,EAAA3B,KAmBJ4B,EAAW,EACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZhC,KAAKe,MAAMC,SAASoB,IAAI,SAACC,GAExB,OADAT,IAEEC,EAAAC,EAAAC,cAAA,OAAK5B,IAAKyB,GACRC,EAAAC,EAAAC,cAAA,SAAIM,EAAIpB,QACRY,EAAAC,EAAAC,cAAA,SACGM,EAAI7B,aAMfqB,EAAAC,EAAAC,cAAA,SACEC,UAAU,eACVM,YAAY,6BACZC,SAtCc,SAACC,GACnBb,EAAKD,SAAS,CAAER,MAAOsB,EAAEC,OAAOrC,SAsC5BA,MAAOJ,KAAKe,MAAMG,QAEpBW,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQW,QAAS,WAlCI,KAArBf,EAAKZ,MAAMG,QACbS,EAAKP,QAAQuB,KAAK,CAChBnC,QAASmB,EAAKZ,MAAMG,MACpBD,OALmB,SAOrBU,EAAKD,SAAS,CAAER,MAAO,QA6BrB,yBA5EQ0B,IAAMC,WAAlB/B,EACGgC,YAAclC,EAoFRE,QC/EKiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAO,IAAIvD,EAEjBwD,IAASC,OACPzB,EAAAC,EAAAC,cAACnB,EAAY2C,SAAb,CAAsBnD,MAAOgD,GAC3BvB,EAAAC,EAAAC,cAACyB,EAAD,OAEAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c37f34fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import io from 'socket.io-client';\nimport { ChatMessage } from './types';\nimport { fromEvent, Observable } from 'rxjs';\n\nexport class SocketService {\n  private socket: SocketIOClient.Socket = {} as SocketIOClient.Socket;\n\n  public init (): SocketService {\n    console.log('initiating socket service');\n    this.socket = io('localhost:8080');\n    return this;\n  }\n\n  // send a message for the server to broadcast\n  public send (message: ChatMessage): void {\n    console.log('emitting message: ' + message);\n    this.socket.emit('message', message);\n  }\n\n  // link message event to rxjs data source\n  public onMessage (): Observable<ChatMessage> {\n    return fromEvent(this.socket, 'message');\n  }\n\n  // disconnect - used when unmounting\n  public disconnect (): void {\n    this.socket.disconnect();\n  }\n}\n","import React, { createContext, useContext } from 'react';\nimport { SocketService } from './SocketService';\n\nexport const ChatContext: React.Context<SocketService> = createContext(new SocketService());\n\n// functional component context hook\nexport const useChat = () => useContext(ChatContext);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ChatMessage, ChatState } from './types';\nimport { ChatContext } from './ChatContext';\n\nclass App extends React.Component {\n  static contextType = ChatContext;\n\n  state: ChatState = {\n    messages: [\n      {\n        message: 'Welcome! Type a message and press Send Message to continue the chat.',\n        author: 'Bot'\n      }\n    ],\n    input: ''\n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\n  render () {\n\n    const updateInput = (e: React.ChangeEvent<HTMLInputElement>): void => {\n      this.setState({ input: e.target.value });\n    }\n\n    const handleMessage = (): void => {\n\n      const author: string = 'Ross';\n\n      if (this.state.input !== '') {\n        this.context.send({\n          message: this.state.input,\n          author: author\n        });\n        this.setState({ input: '' });\n      }\n    };\n\n    let msgIndex = 0;\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <div className=\"App-chatbox\">\n          {this.state.messages.map((msg: ChatMessage) => {\n            msgIndex++;\n            return (\n              <div key={msgIndex}>\n                <p>{msg.author}</p>\n                <p>\n                  {msg.message}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n        <input\n          className=\"App-Textarea\"\n          placeholder=\"Type your messsage here...\"\n          onChange={updateInput}\n          value={this.state.input}\n        />\n        <p>\n          <button onClick={() => { handleMessage() }}>\n            Send Message\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SocketService } from './SocketService';\nimport { ChatContext } from './ChatContext';\n\nconst chat = new SocketService();\n\nReactDOM.render(\n  <ChatContext.Provider value={chat}>\n    <App />\n  </ChatContext.Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}